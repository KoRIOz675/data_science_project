import json

# Helper
def get_data(data_dict, key, sub_key=None, default="N/A"):
    if data_dict is None:
        return default
    main_val = data_dict.get(key)
    if main_val is None:
        return default
    if sub_key:
        return main_val.get(sub_key, default)
    return main_val

# Comments functions
def display_comment_q2(data):
    print("\n--- Comment on Q2 ---")
    results_q2 = get_data(data, 'q2_results', default={})
    print("The extreme values provide a snapshot of the climatic diversity across the sampled French cities in 2024.")
    print(f"- Temperature: {get_data(results_q2, 'q2a_city')} ({get_data(results_q2, 'q2a_value')}°C) experiences the coldest minimums, while {get_data(results_q2, 'q2d_city')} ({get_data(results_q2, 'q2d_value')}°C) has the highest maximums. This typically reflects geographical location. {get_data(results_q2, 'q2b_city')} ({get_data(results_q2, 'q2b_value')}°C) shows high minimum temperatures.")
    print(f"- Rainfall: {get_data(results_q2, 'q2f_city')} ({get_data(results_q2, 'q2f_value')} mm) has the highest rainfall, while {get_data(results_q2, 'q2e_city')} ({get_data(results_q2, 'q2e_value')} mm) shows low rainfall.")
    print(f"- Sunshine: {get_data(results_q2, 'q2h_city')} ({get_data(results_q2, 'q2h_value')} hours) enjoys the most sunshine, while {get_data(results_q2, 'q2g_city')} ({get_data(results_q2, 'q2g_value')} hours) has the least.")
    print("These extremes generally align with known climatic patterns in France.")

def display_comment_q3(data):
    print("\n--- Comment on Q3 ---")
    variances = get_data(data, 'q3_variances', default={})
    var_min_temp = get_data(variances, 'var_min_temp', default=float('nan'))
    var_max_temp = get_data(variances, 'var_max_temp', default=float('nan'))
    var_rainfall = get_data(variances, 'var_rainfall', default=float('nan'))
    var_sunshine = get_data(variances, 'var_sunshine', default=float('nan'))

    print("Variance measures the spread of the data around its mean.")
    print(f"- Temperature (Min: {var_min_temp:.2f}, Max: {var_max_temp:.2f}): Relatively low variance, suggesting temperatures don't fluctuate wildly from the average across cities.")
    print(f"- Rainfall ({var_rainfall:.2f}): Significantly higher variance, indicating a wide range of precipitation levels.")
    print(f"- Sunshine Duration ({var_sunshine:.2f}): Also very high variance, meaning a large disparity in sunshine hours.")
    print("High variances for rainfall and sunshine suggest these contribute more to climatic diversity than temperature alone.")
    print(f"(Note: Variable with lowest variance was identified as '{get_data(data,'q3_lowest_var_name')}', highest was '{get_data(data,'q3_highest_var_name')}')")


def display_comment_q4(data):
    print("\n--- Comment on Q4 ---")
    q4_s = get_data(data, 'q4_stats', default={})
    print(f"The variable '{get_data(q4_s, 'var_name')}' has the lowest variance ({get_data(q4_s, 'variance_val', default=float('nan')):.2f}).")
    print(f"Its mean is {get_data(q4_s, 'mean_val', default=float('nan')):.2f} and median is {get_data(q4_s, 'median_val', default=float('nan')):.2f}. Closeness suggests a relatively symmetric distribution.")
    print(f"The standard deviation of {get_data(q4_s, 'std_val', default=float('nan')):.2f} is small, confirming low variance.")
    print("The histogram (generated by main.py) visually confirms this with a narrow peak.")


def display_comment_q5(data):
    print("\n--- Comment on Q5 ---")
    q5_s = get_data(data, 'q5_stats', default={})
    print(f"The variable '{get_data(q5_s, 'var_name')}' has the highest variance ({get_data(q5_s, 'variance_val', default=float('nan')):.2f}).")
    print(f"Its mean is {get_data(q5_s, 'mean_val', default=float('nan')):.2f} and median is {get_data(q5_s, 'median_val', default=float('nan')):.2f}. Difference might suggest skewness.")
    print(f"The standard deviation of {get_data(q5_s, 'std_val', default=float('nan')):.2f} is large, confirming high variance.")
    print(f"The histogram for '{get_data(q5_s, 'var_name')}' (generated by main.py) shows a wider spread.")

# Main function to display all comments
def display_all_comments(data_file="comment_data.json"):
    try:
        with open(data_file, 'r') as f:
            all_data = json.load(f)
    except FileNotFoundError:
        print(f"Error: Data file '{data_file}' not found. Run the main analysis script (main.py) first to generate it.")
        return
    except json.JSONDecodeError:
        print(f"Error: Could not decode JSON from '{data_file}'. The file might be corrupted or empty.")
        return

    print("="*50)
    print("PROJECT COMMENTS (based on last main.py run)")
    print("="*50)

    display_comment_q2(all_data)
    display_comment_q3(all_data)
    display_comment_q4(all_data)
    display_comment_q5(all_data)

    print("\n" + "="*50)
    print("End of comments.")
    print("="*50)


if __name__ == "__main__":
    display_all_comments()
